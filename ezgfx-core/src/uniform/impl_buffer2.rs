// -- provided by user --
/*
#[uniform]
struct UniformBuffer
{
    foo: u32,
    bar: [f32; 16],
    baz: [f32; 3],
}
*/

// -- generated by macro --
struct MyUniformBuffer
{
    foo: u32,
    bar: [f32; 16],
    baz: [f32; 3],

    buf: wgpu::Buffer,
}

impl crate::Uniform for MyUniformBuffer
{
    fn ty(&self) -> wgpu::BindingType
    {
        wgpu::BindingType::UniformBuffer { dynamic: false }
    }

    fn resource(&self) -> wgpu::BindingResource
    {
        wgpu::BindingResource::Buffer
        {
            buffer: &self.buf,
            range: 0..Self::SIZE as wgpu::BufferAddress
        }
    }
}

impl MyUniformBuffer
{
    const SIZE: usize = 42; // macro eval

    pub fn create(render: &crate::RenderQueue, foo: u32, bar: [f32; 16], baz: [f32; 3]) -> Self
    {
        #[repr(C)]
        #[derive(Copy, Clone)]
        struct Data // same exact as user-provided def, with name 'Data'
        {
            foo: u32,
            bar: [f32; 16],
            baz: [f32; 3],
        }

        let data = Data { foo, bar, baz };

        unsafe impl bytemuck::Pod for Data {}
        unsafe impl bytemuck::Zeroable for Data {}

        let buf = render.device.create_buffer_with_data
        (
            bytemuck::cast_slice(&[data]),
            wgpu::BufferUsage::UNIFORM | wgpu::BufferUsage::COPY_DST
        );

        Self
        {
            foo,
            bar,
            baz,
            buf
        }
    }
}
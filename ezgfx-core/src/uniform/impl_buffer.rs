// use wgpu::*;

// use crate::{ Uniform, RenderQueue };

// //[uniform]
// struct UniformBuffer
// {
//     // -- provided by user --
//     foo: u32,
//     bar: [f32; 16],
//     baz: [f32; 3],

//     // -- generated by macro --
//     bind_group_layout: BindGroupLayout,
//     bind_group: BindGroup,
// }

// // -- generated by macro --
// impl Uniform for UniformBuffer
// {
//     fn bind_group_layout(&self) -> &wgpu::BindGroupLayout
//     {
//         &self.bind_group_layout
//     }

//     fn bind_group(&self) -> &wgpu::BindGroup
//     {
//         &self.bind_group
//     }
// }

// // -- generated by macro --
// impl UniformBuffer
// {
//     pub fn create(render: &RenderQueue, foo: u32, bar: [f32; 16], baz: [f32; 3]) -> Self
//     {
//         #[repr(C)]
//         #[derive(Copy, Clone)]
//         struct UniformBufferData // same exact as user-provided def, with appended 'Data'
//         {
//             foo: u32,
//             bar: [f32; 16],
//             baz: [f32; 3],
//         }

//         let data = UniformBufferData { foo, bar, baz };

//         unsafe impl bytemuck::Pod for UniformBufferData {}
//         unsafe impl bytemuck::Zeroable for UniformBufferData {}

//         let buf = render.device.create_buffer_with_data
//         (
//             bytemuck::cast_slice(&[data]),
//             BufferUsage::UNIFORM | BufferUsage::COPY_DST
//         );

//         let bind_group_layout = render.device.create_bind_group_layout
//         (
//             &BindGroupLayoutDescriptor
//             {
//                 bindings:
//                 &[
//                     BindGroupLayoutEntry
//                     {
//                         binding: 0,
//                         visibility: ShaderStage::VERTEX,
//                         ty: BindingType::UniformBuffer { dynamic: false }
//                     }
//                 ],
//                 label: Some("UniformBuffer_uniform_bind_group_layout")
//             }
//         );
//         let bind_group = render.device.create_bind_group
//         (
//             &BindGroupDescriptor
//             {
//                 layout: &bind_group_layout,
//                 bindings:
//                 &[
//                     Binding
//                     {
//                         binding: 0,
//                         resource: BindingResource::Buffer
//                         {
//                             buffer: &buf,
//                             range: 0..std::mem::size_of_val(&data) as BufferAddress
//                         }
//                     }
//                 ],
//                 label: Some("UniformBuffer_bind_group_descriptor")
//             }
//         );

//         Self
//         {
//             foo,
//             bar,
//             baz,
//             bind_group_layout,
//             bind_group
//         }
//     }

//     /// send updated values of this uniform instance to the GPU 
//     pub fn update()
//     {
//         todo!()
//     }

//     // pub fn set_foo(&mut self, render: &RenderQueue)
// }